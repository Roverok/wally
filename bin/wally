#!/usr/bin/env node
// MIT/X11-like license.  See LICENSE.txt.
// Copyright 2013 BitPay, Inc.

var CLIENT_VERSION = "0.1";
var fs = require('fs');
var util = require('util');
var program = require('commander');
var Block = require('libcoin/Block').class();
var EncFile = require('libcoin/util/EncFile');
var HeaderDB = require('../HeaderDB').class();
var KeyModule = require('libcoin/Key');
var coinUtil = require('libcoin/util/util');
var networks = require('libcoin/networks');
var Address = require('libcoin/Address').class();
var ENC_METHOD = 'aes-256-cbc';

program
	.version(CLIENT_VERSION)
	.option('-f, --file [wallet]', 'Load/store wallet data in this file [walletdb.aes]', 'walletdb.aes')
	.option('-p, --peers [peerdb]', 'JSON file containing network peers [peerdb.json]', 'peerdb.json')
	.option('-H, --headers [hdrdb]', 'Binary blockchain header db [hdrdb.dat]', 'hdrdb.dat')
	.option('-P, --pass [passphrase]', 'AES wallet passphrase')
	.parse(process.argv);

var walletdb_fn = program.file;
var peerdb_fn = program.peers;
var hdrdb_fn = program.headers;

// blank wallet
var datastore = {
	client: 'wally',
	client_version: CLIENT_VERSION,
	network: 'livenet',
	version: 1,
	best_hash: null,
	best_height: -1,
	keys: [],
};
var hdrdb = undefined;
var peerdb = undefined;
var network = undefined;
var syncState = 'init';		// empty headerdb, no genesis block

function list_commands()
{
	var s = "wally command summary:\n";
	s += "clean\t\tRemove transaction state database\n";
	s += "dump\t\tInspect internal transaction state\n";
	s += "help\t\tList this command summary\n";
	s += "init [network]\tInitialize new transaction state database\n";
	s += "key.new\t\tGenerate new ECDSA private key (bitcoin address\n";
	console.log(s);
}

// current time, in seconds
function curtime()
{
	return Math.round(Date.now() / 1000);
}

function network_load(netname)
{
	switch (netname) {
	case "mainnet":
	case "livenet":
		network = networks.livenet;
		break;
	case "testnet":
		network = networks.testnet;
		break;
	default:
		console.error("Unsupported network", netname);
		break;
	}

	// store+canonicalize name
	datastore['network'] = network.name;
}

function remove_datastore(callback)
{
	fs.exists(walletdb_fn, function(exists) {
		if (exists)
			fs.unlink(walletdb_fn, function(err) {
				if (err) throw err;
				callback();
			});
	});
}

function read_datastore(callback)
{
	datastore = EncFile.readJFileSync(ENC_METHOD, program.pass, walletdb_fn);
	callback();
}

function write_datastore(callback)
{
	var tmp_fn = walletdb_fn + ".tmp";

	try {
		EncFile.writeJFileSync(ENC_METHOD, program.pass, tmp_fn,datastore);
		fs.rename(tmp_fn, walletdb_fn, callback);
	} catch(e) {
		console.error("Failed to write wallet.");
		callback(e);
	}
}

function wallet_load()
{
	read_datastore(function(err) {});
	network_load(datastore['network']);
}

function peerdb_load()
{
	try {
		peerdb = JSON.parse(fs.readFileSync(peerdb_fn));
	} catch(d) {
		console.warn('Unable to read peer db', peerdb_fn, 'creating new one.');
		peerdb = [
			{ ipv4: '127.0.0.1', port: 18333 },
		];

		fs.writeFileSync(peerdb_fn, JSON.stringify(peerdb));
	}
}

function hdrdb_load()
{
	hdrdb = new HeaderDB({network: network});

	try {
		hdrdb.readFile(hdrdb_fn);
	} catch(e) {
		// do nothing
	}
}

function cmd_init()
{
	if (program.args.length > 1)
		network_load(program.args[1]);
	else
		network_load('livenet');

	write_datastore(function(err) {});
}

function cmd_key_new()
{
	var newKey = KeyModule.Key.generateSync();
	var pubKey = newKey.public.toString('hex');
	var pubKeyHash = coinUtil.sha256ripe160(newKey.public);
	var addr = new Address(network.addressPubkey, pubKeyHash);
	var walletKey = {
		created: curtime(),
		priv: newKey.private.toString('hex'),
		pub: pubKey,
		addr: addr.toString(),
	};

	datastore.keys.push(walletKey);

	write_datastore(function(err) {});

	console.log(addr.toString());
}

function netsync_block(info)
{
	var block = new Block(info.message);
	hdrdb.add(block);

	console.log("HeaderDB added block #" + (hdrdb.size() - 1) + ", " +
		    coinUtil.formatHashFull(block.calcHash()));
}

function netsync_verack(info)
{
	var inv = {
		type: 2,	// MSG_BLOCK
		hash: network.genesisBlock.hash,
	};
	var invs = [ inv ];

	info.conn.sendGetData(invs);
}

function netsync_connected(data)
{
	var peerman = data.pm;

	console.log("netsync: Connected to (at least one) peer");
}

function cmd_netsync()
{
	var config = {
		network: network.name
	};
	var PeerManager = require('libcoin/PeerManager').createClass({config: config});
	var Peer = require('libcoin/Peer').class();

	console.log("netsync begins");

	var peerman = new PeerManager();

	peerdb.forEach(function(datum) {
		var peer = new Peer(datum.ipv4, datum.port);
		peerman.addPeer(peer);
	});

	peerman.on('connection', function(conn) {
		conn.on('verack', netsync_verack);
		conn.on('block', netsync_block);
	});
	peerman.on('connect', function(data) {
		netsync_connected(data);
	});

	peerman.start();
}

function main()
{
	if (program.args.length == 0) {
		console.error("No command specified.");
		list_commands();
		return;
	}

	var cmd = program.args[0];
	
	if (cmd != 'init' && cmd != 'help' && cmd != 'clean') {
		wallet_load();
	}

	peerdb_load();
	hdrdb_load();

	switch (cmd) {

	case "clean":
		remove_datastore(function(err) {});
		break;

	case "dump":
		console.dir(datastore);
		break;

	default:
		console.error("Unknown command", cmd);
		// fall through

	case "help":
		list_commands();
		return;
	
	case "init":
		cmd_init();
		break;

	case "key.new":
		cmd_key_new();
		break;

	case "netsync":
		cmd_netsync();
		break;
	}
}

main();

